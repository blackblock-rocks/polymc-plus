plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
	id 'org.checkerframework' version '0.6.48'
}

apply plugin: 'org.checkerframework'

/**
 * Version setup
 */
archivesBaseName = project.archives_base_name
def baseVersion = project.mod_version
def baseGroup = project.maven_group
def localPropertiesFile = file('local.properties')
def localProperties = new Properties()

if (localPropertiesFile.exists()) {
	localPropertiesFile.withInputStream { stream ->
		localProperties.load(stream)
	}
}

def envVars = System.getenv()
def currentEnvironment = envVars.getOrDefault("ENV", localProperties.getProperty("environment", "dev"))
def isDevelopment = currentEnvironment == "dev"
def localRepoDir = null
ext.versionModifier = null

if (localProperties.hasProperty("localRepoDir")) {
	localRepoDir = localProperties.getProperty("localRepoDir")
} else if (project.hasProperty("localRepoDir")) {
	localRepoDir = project.findProperty("localRepoDir")
}

if (isDevelopment) {
	versionModifier = "-SNAPSHOT"
}

def constructVersion(baseVersion) {
	def result = baseVersion + versionModifier
	return result
}

archivesBaseName = project.archives_base_name
version = constructVersion(baseVersion)
group = baseGroup

println("Info: currentEnvironment = $currentEnvironment")
println("Info: isDevelopment = $isDevelopment")
println("Info: localRepoDir = $localRepoDir")
println("Info: versionModifier = $versionModifier")
println("Info: version = " + version)

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	flatDir {
		dirs '../PolyMc/build/libs/'
	}

	flatDir {
		dirs '../polyvalent/build/libs/'
	}

	maven {
		url 'https://jitpack.io'
	}

	// PolyMC
	maven {
		url "https://maven.theepicblock.nl"
		content {
			includeGroup("nl.theepicblock")
		}
	}

	// Blackblock
	maven {
		url 'https://maven.blackblock.rocks/releases'
	}

	// Modrinth offers a maven repository
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}

	// Curseforge also offers a maven repository,
	// though dependencies have to use file id's
	exclusiveContent {
		forRepository {
			maven {
				url "https://cursemaven.com"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}

	if (isDevelopment && localRepoDir) {
		maven {
			url localRepoDir
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	modImplementation "com.github.TheEpicBlock:PolyMc:${project.polymc_version}"
	modImplementation "rocks.blackblock:polyvalent:${project.polyvalent_version}"

	// The Blackblock Bib Library
	modImplementation "rocks.blackblock:blackblock-bib:${constructVersion(project.blackblock_bib_version)}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.20.5 upwards uses Java 21.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

def env = System.getenv()

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = archives_base_name

			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		repositories {
			if (env.MAVEN_URL) {
				maven {
					credentials {
						username env.MAVEN_USERNAME
						password env.MAVEN_PASSWORD
					}
					url env.MAVEN_URL
				}
			} else {
				mavenLocal()
			}

			if (isDevelopment) {

				if (localRepoDir) {
					maven {
						name = 'local'
						url = uri(localRepoDir)
					}
				} else {
					mavenLocal()
				}
			}
		}
	}
}
